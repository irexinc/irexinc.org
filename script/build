#!/usr/bin/env bash
#
# This script allows us to build the zip file for the entire site or just a diff
# from the last time we deployed.

set -e

echo ''

LOG_FILE="/tmp/irexinc-build"
touch $LOG_FILE

log () {
  echo '' >> $LOG_FILE
  echo "== $1 ==" >> $LOG_FILE
}

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
  log "INFO: $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
  log "USER: $1"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
  log "OK: $1"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  echo 'See $LOG_FILE for more information'
  exit
}

# Die if we are running from within the script directory.
if [ "$(basename `pwd`)" == "script" ]
then
  echo "Please run from the root directory of the project."
  exit
fi

# Die if we didn't get passed a parameter to the script
if [ -z "$1" ]
then
  echo "Usage: script/build (site|diff)"
  exit
fi


mkdir -p build/

# Update composer
info "Updating composer.phar"
if [ -z "$(php composer.phar selfupdate >> $LOG_FILE)" ]
then
  success "Updated composer.phar"
else
  fail "Failed to update composer.phar"
fi

info "Readying the vendor packages for production."
if [ -z "$(php composer.phar update --prefer-source --no-dev >> $LOG_FILE)" ]
then
  success "Vendor packages ready for production."
else
  fail "Failed to update vendor packages."
fi


# This is our current sha for our HEAD.
currentSha="$( git log | head -n 1 | awk '{ print $2 }' )"

# No matter what, assume we have a previous sha.
lastSha="$(cat script/lastSha | tail -n 1)"


# What we want to archive.
what="master"

case "$1" in

  # Build the entire site from the current HEAD.
  "site" )

    filename="build/site_deploy-$currentSha.zip"

    ;;

  # Build just the diff from the last SHA to the current HEAD.
  "diff" )

    if [ ! -z "$lastSha" ]
    then

      filename="build/site_update-$lastSha-$currentSha.zip"

      # This generates a file list for our diff only.
      what="$(git diff $lastSha master --name-only)"

    else

      echo "Notice: Could not find a previous sha."
      filename="build/site_update-master.zip"

    fi
    ;;

esac


# Remove previous file if it exists.
if [ -f $filename ]
then
  rm -f $filename
fi


info "Building site archive to $filename."

# Actually do the archiving.
if [ "$what" = "master" ]
then

  # Zip the entire application.
  zip $filename -r9 app LICENSE artisan composer.json composer.lock irexinc.org phpunit.xml readme.md server.php -x app/storage/\* \*.DS_Store >> $LOG_FILE

  # Add base storage folders so we can just "drag and drop" the entire site deploy without issue after copy.
  zip $filename -u app/storage/views app/storage/sessions app/storage/meta app/storage/logs app/storage/cache >> $LOG_FILE

else

  # Create the diff archive.
  zip $filename -r9 $what -x app/storage/\* .travis.yml \*.gitignore script/\* build/\* >> $LOG_FILE

fi


# Setup the bootstrap/compiled.php with our production path.
sed 's/\/Users\/matt\/code\/irexinc.org/\/hsphere\/local\/home\/irexinc/g' bootstrap/compiled.php > bootstrap/compiled.php.new && mv bootstrap/compiled.php.new bootstrap/compiled.php


# We are always going to update the vendor folder section because we updated
# that directory at the start of this build.
zip $filename -ur vendor bootstrap -x \*.git/\* \*.DS_Store \*.gitkeep \*.gitignore \*.gitattributes >> $LOG_FILE


# Reset the bootstrap/compiled script
sed 's/\/hsphere\/local\/home\/irexinc/\/Users\/matt\/code\/irexinc.org/g' bootstrap/compiled.php > bootstrap/compiled.php.new && mv bootstrap/compiled.php.new bootstrap/compiled.php


# Save off the last commit sha for building just an udpate diff.
if [ "$currentSha" != "$lastSha" ]
then
  printf "\n$currentSha" >> script/lastSha
fi

success "Built $filename successfully."


info "Reseting vendor packages to development environment."
if [ -z "$(php composer.phar update --prefer-source --dev >> $LOG_FILE)" ]
then
  success "Reset vendor packages."
else
  fail "Failed to reset the vendor packages."
fi

echo ''
echo '  All Done!'